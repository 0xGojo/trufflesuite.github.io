<section class="BallotinIndexContainer">
  <div class="container">
    <div class="row m-b-2">
      <div class="col-xs-12">
        <h1>TRUFFLE BOXES</h1>
        <p><strong>Truffle Boxes</strong> are helpful boilerplates that allow you to focus on what makes your dapp unique. In addition to Truffle, React and Webpack, some Truffle Boxes contain lightweight scaffolding with react-router, authentication via your dappâ€™s smart contracts or uport, and minimal front-end views built with the Pure CSS framework.</p>
      </div>
    </div>

    <div class="row m-b-4">
      <div class="col-xs-12">
        <h2 class="m-b-2">Official Truffle Boxes</h2>
      </div>

      <div class="col-xs-12 col-md-4">
        <section class="FeatureCard">
          <div class="FeatureBody FeatureImage" style="background: url(https://truffle-box.github.io/img/tb-react.png), #0C1A2B;"></div>

          <footer class="BoxRundown">
            <h3>
              truffle-react<br/>
              <small>ðŸŸŠ 26</small>
            </h3>

            <p>This box comes with everything you need to start using smart contracts from a react app. This is as barebones as it gets, so nothing stands in your way.</p>

            <ul class="BoxRundownList">
              <li>
                <a class="label label-default" href="#">react</a>&nbsp;
                <a class="label label-default" href="#">webpack</a>&nbsp;
                <a class="label label-default" href="#">webapp</a>&nbsp;
                <a class="label label-default" href="#">official</a>
              </li>
            </ul>
          </footer>
        </section>
      </div>

      <div class="col-xs-12 col-md-4">
        <section class="FeatureCard">
          <div class="FeatureBody FeatureImage" style="background: url(https://truffle-box.github.io/img/tb-auth.png), #0C1A2B;"></div>

          <footer class="BoxRundown">
            <h3>
              truffle-react-auth<br/>
              <small>ðŸŸŠ 17</small>
            </h3>

            <p>This box adds react-router, redux and redux-auth-wrapper for authentication powered by a smart contract. Great for building your own auth system.</p>

            <ul class="BoxRundownList">
              <li>
                <a class="label label-default" href="#">auth</a>&nbsp;
                <a class="label label-default" href="#">react</a>&nbsp;
                <a class="label label-default" href="#">redux</a>&nbsp;
                <a class="label label-default" href="#">webpack</a>&nbsp;
                <a class="label label-default" href="#">webapp</a>&nbsp;
                <a class="label label-default" href="#">official</a>
              </li>
            </ul>
          </footer>
        </section>
      </div>

      <div class="col-xs-12 col-md-4">
        <section class="FeatureCard">
          <div class="FeatureBody FeatureImage" style="background: url(https://truffle-box.github.io/img/tb-uport.png), #0C1A2B;"></div>

          <footer class="BoxRundown">
            <h3>
              truffle-react-uport<br/>
              <small>ðŸŸŠ 20</small>
            </h3>

            <p>This box adds react-router, redux and redux-auth-wrapper for authentication powered by UPort. The easiest way to get started with UPort.</p>

            <ul class="BoxRundownList">
              <li>
                <a class="label label-default" href="#">uport</a>&nbsp;
                <a class="label label-default" href="#">react</a>&nbsp;
                <a class="label label-default" href="#">redux</a>&nbsp;
                <a class="label label-default" href="#">webpack</a>&nbsp;
                <a class="label label-default" href="#">webapp</a>&nbsp;
                <a class="label label-default" href="#">official</a>
              </li>
            </ul>
          </footer>
        </section>
      </div>
    </div>
  </div>

  <div class="CommunityBoxes">
    <div class="container">
      <div class="row">
        <div class="col-xs-12 col-md-8">
          <h2>Community Truffle Boxes</h2>
          <p>Introducing our first community Truffle Box: <strong>Status.im</strong>!</p>

          <h2>Create Your Own!</h2>
          <p></p>
        </div>

        <div class="col-xs-12 col-md-4">
          <section class="FeatureCard">
            <div class="FeatureBody FeatureImage Status" style="background: url(/images/ballotin/status-thumb.png), #0C1A2B;"></div>

            <footer class="BoxRundown">
              <h3>
                status-im<br/>
                <small>ðŸŸŠ 15</small>
              </h3>

              <p>This box comes with everything you need to start using smart contracts from a react app on your mobile. Of course, testing of this box requires you to have iOS/Android device with Status installed on it.</p>

              <ul class="BoxRundownList">
                <li>
                  <a class="label label-default" href="#">status</a>&nbsp;
                  <a class="label label-default" href="#">react</a>&nbsp;
                  <a class="label label-default" href="#">webpack</a>&nbsp;
                  <a class="label label-default" href="#">webapp</a>&nbsp;
                </li>
              </ul>
            </footer>
          </section>
        </div>
      </div>
    </div>
  </div>
</div>
